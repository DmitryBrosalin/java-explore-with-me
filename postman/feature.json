{
	"info": {
		"_postman_id": "5f344446-bdbe-4702-90d4-f1a02498ff1a",
		"name": "Test Explore With Me - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38835407"
	},
	"item": [
		{
			"name": "prepare-tests",
			"item": [
				{
					"name": "Добавление автора события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"test_name_initiator\",\n    \"email\":\"test_initiator@test.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление категории",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"test_category\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление события (будет опубликовано)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"annotation\":\"test_annotation_12345_will_be_published\",\n    \"category\":1,\n    \"description\":\"test_description_12345\",\n    \"eventDate\":\"2026-01-01 00:00:00\",\n    \"location\":{\n        \"lat\":25.000,\n        \"lon\":25.000\n    },\n    \"paid\":\"false\",\n    \"participantLimit\":20,\n    \"requestModeration\":\"false\",\n    \"title\":\"test_title_12345\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление события (будет отменено)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"annotation\":\"test_annotation_12345_will_be_rejected\",\n    \"category\":1,\n    \"description\":\"test_description_12345\",\n    \"eventDate\":\"2026-01-01 00:00:00\",\n    \"location\":{\n        \"lat\":25.000,\n        \"lon\":25.000\n    },\n    \"paid\":\"false\",\n    \"participantLimit\":20,\n    \"requestModeration\":\"false\",\n    \"title\":\"test_title_12345\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление события (не будет опубликовано)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"annotation\":\"test_annotation_12345_will_be_pending\",\n    \"category\":1,\n    \"description\":\"test_description_12345\",\n    \"eventDate\":\"2026-01-01 00:00:00\",\n    \"location\":{\n        \"lat\":25.000,\n        \"lon\":25.000\n    },\n    \"paid\":\"false\",\n    \"participantLimit\":20,\n    \"requestModeration\":\"false\",\n    \"title\":\"test_title_12345\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"test_name_user\",\n    \"email\":\"test_user@test.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Публикация события 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stateAction\":\"PUBLISH_EVENT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отклонение события 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stateAction\":\"REJECT_EVENT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "post-comment",
			"item": [
				{
					"name": "Успешное добавление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, text, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.created).to.not.be.null;",
									"    pm.expect(target.authorName).to.not.be.null;",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту, отправленному в запросе');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"testcomment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария несуществующим пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"testcomment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/100/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"100",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария к несуществующему событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"testcomment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария к отмененному событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"testcomment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария к неопубликованному событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"testcomment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария с текстом null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария с пустым текстом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария с текстом, состоящим из пробелов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"    \"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария длиной 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, text, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.created).to.not.be.null;",
									"    pm.expect(target.authorName).to.not.be.null;",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту, отправленному в запросе');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария длиной 254",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, text, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.created).to.not.be.null;",
									"    pm.expect(target.authorName).to.not.be.null;",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту, отправленному в запросе');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария длиной больше 254",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quisa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "patch-comment",
			"item": [
				{
					"name": "Обновление комментария несуществующим пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"testcomment_UPDATE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/100/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"100",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария к несуществующему событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"testcomment_UPDATE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/100/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"100",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария с текстом null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария с пустым текстом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария с текстом, состоящим из пробелов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"    \"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария длиной 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, text, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.created).to.not.be.null;",
									"    pm.expect(\"test_name_user\").equal(target.authorName, 'Имя пользователя должно соответствовать имени автора');",
									"    pm.expect(\"1\").equal(target.text, 'Текст комментария должен соответствовать тексту, отправленному в запросе');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария длиной 254",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, text, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.created).to.not.be.null;",
									"    pm.expect(\"test_name_user\").equal(target.authorName, 'Имя пользователя должно соответствовать имени автора');",
									"    pm.expect(\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis\").equal(target.text, 'Текст комментария должен соответствовать тексту, отправленному в запросе');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария длиной больше 254",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quisa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное обновление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, text, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.created).to.not.be.null;",
									"    pm.expect(source.authorName).to.not.be.null;",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту, отправленному в запросе');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"testcomment_UPDATE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get-comment",
			"item": [
				{
					"name": "Успешное получение комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны быть полными\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.created).to.not.be.null;",
									"    pm.expect(target.authorName).to.not.be.null;",
									"    pm.expect(target.text).to.not.be.null;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария с неверно указанным автором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/100/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"100",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария с неверно указанным событием",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/comments/100/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"100",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария с несуществующим id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1",
								"100"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delete-comment",
			"item": [
				{
					"name": "Удаление комментария с неверно указанным автором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/100/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"100",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария с неверно указанным событием",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/comments/100/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"100",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное удаление комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "prepare-tests-2",
			"item": [
				{
					"name": "Публикация события 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stateAction\":\"PUBLISH_EVENT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария-дистрактора (не должен входить в подборки комментариев)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"DISTRACTOR\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get-comments-for-event-public",
			"item": [
				{
					"name": "Успешное получение комментариев для события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"pm.expect(target).is.an('array');",
									"",
									"pm.test(\"Комментарии должны содержать поля: id, authorName, text, created\", function () {",
									"pm.expect(target[0]).to.have.property('id');",
									"pm.expect(target[0]).to.have.property('authorName');",
									"pm.expect(target[0]).to.have.property('text');",
									"pm.expect(target[0]).to.have.property('created');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/events/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев для несуществующего события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/events/100/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"100",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get-comments-for-user-admin",
			"item": [
				{
					"name": "Успешное получение комментариев для пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"pm.expect(target).is.an('array');",
									"",
									"pm.test(\"Комментарии должны содержать поля: id, authorName, text, created\", function () {",
									"pm.expect(target[0]).to.have.property('id');",
									"pm.expect(target[0]).to.have.property('authorName');",
									"pm.expect(target[0]).to.have.property('text');",
									"pm.expect(target[0]).to.have.property('created');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users/2/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"2",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев для несуществующего пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users/100/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"100",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delete-comment-by-admin",
			"item": [
				{
					"name": "Успешное удаление комментария (дистрактора) админом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users/1/comments/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"1",
								"comments",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление несуществующего комментария админом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users/1/comments/100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"1",
								"comments",
								"100"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get-events-with-comments-by-admin",
			"item": [
				{
					"name": "Создание комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, text, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.created).to.not.be.null;",
									"    pm.expect(target.authorName).to.not.be.null;",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту, отправленному в запросе');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\":\"test_comment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение админом списка событий с комментариями",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const arr = pm.response.json();",
									"pm.expect(arr).is.an('array');",
									"",
									"pm.test(\"Событие должно содержать поле comments\", function () {",
									"pm.expect(arr[0]).to.have.property('comments');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(arr[0].comments[0].id).equal(2, 'Комментарий к событию должен быть выведен вместе с самим событием');",
									"    pm.expect(arr[0].comments[1].id).equal(3, 'Комментарий к событию должен быть выведен вместе с самим событием');",
									"",
									"    pm.expect(arr[2].comments[0].id).equal(5, 'Комментарий к событию должен быть выведен вместе с самим событием');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get-event-with-comments-public",
			"item": [
				{
					"name": "Получение события с комментариями public",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Событие должно содержать поле comments\", function () {",
									"pm.expect(target).to.have.property('comments');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.comments[0].id).equal(2, 'Комментарий к событию должен быть выведен вместе с самим событием');",
									"    pm.expect(target.comments[1].id).equal(3, 'Комментарий к событию должен быть выведен вместе с самим событием');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/events/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get-event-with-comments-by-user",
			"item": [
				{
					"name": "Получение события с комментариями user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Событие должно содержать поле comments\", function () {",
									"pm.expect(target).to.have.property('comments');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.comments[0].id).equal(2, 'Комментарий к событию должен быть выведен вместе с самим событием');",
									"    pm.expect(target.comments[1].id).equal(3, 'Комментарий к событию должен быть выведен вместе с самим событием');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/events/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}